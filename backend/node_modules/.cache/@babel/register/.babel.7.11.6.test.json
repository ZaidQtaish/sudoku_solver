{
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var puzzleString = req.body.puzzle;\n    var coord = req.body.coordinate;\n    var value = req.body.value;\n    if (!puzzleString || !coord || !value) return res.json({\n      error: 'Required field(s) missing'\n    }); // Valdidate puzzle\n\n    if (!puzzleString) return res.json({\n      error: 'Required field missing'\n    });\n    if (!/^[0-9.]+$/.test(puzzleString)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzleString.length != 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    }); // Validate coords and value\n\n    if (!/^[a-i][1-9]$/.test(coord.toLowerCase())) return res.json({\n      error: 'Invalid coordinate'\n    });\n    if (!/^[1-9]$/.test(value)) return res.json({\n      error: 'Invalid value'\n    });\n    var row = coord[0];\n    var col = coord[1];\n    var isValid = true;\n    var conflict = [];\n\n    if (!solver.checkRowPlacement(puzzleString, row, value)) {\n      isValid = false;\n      conflict.push('row');\n    }\n\n    if (!solver.checkColPlacement(puzzleString, col, value)) {\n      isValid = false;\n      conflict.push('column');\n    }\n\n    if (!solver.checkRegionPlacement(puzzleString, row, col, value)) {\n      isValid = false;\n      conflict.push('region');\n    }\n\n    var rowIndex = coord.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\n\n    var colIndex = coord[1] - 1; // Convert '1-9' to 0-8\n\n    var cellIndex = rowIndex * 9 + colIndex;\n    if (puzzleString[cellIndex] == value) return res.json({\n      valid: true\n    });\n\n    if (isValid) {\n      res.json({\n        valid: true\n      });\n    } else res.json({\n      valid: false,\n      conflict: conflict\n    });\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var puzzleString = req.body.puzzle;\n    if (!puzzleString) return res.json({\n      error: 'Required field missing'\n    });\n    if (!/^[0-9.]+$/.test(puzzleString)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzleString.length != 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    });\n    var solvedPuzzle = solver.solve(puzzleString);\n    if (solvedPuzzle == false) return res.json({\n      error: 'Puzzle cannot be solved'\n    });\n    res.json({\n      solution: solvedPuzzle\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "puzzleString",
        "body",
        "puzzle",
        "coord",
        "coordinate",
        "value",
        "json",
        "error",
        "test",
        "length",
        "toLowerCase",
        "row",
        "col",
        "isValid",
        "conflict",
        "checkRowPlacement",
        "push",
        "checkColPlacement",
        "checkRegionPlacement",
        "rowIndex",
        "charCodeAt",
        "colIndex",
        "cellIndex",
        "valid",
        "solvedPuzzle",
        "solve",
        "solution"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = function (app) {\r\n\r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      const puzzleString = req.body.puzzle;\r\n      const coord = req.body.coordinate;\r\n      const value = req.body.value;\r\n      if (!puzzleString || !coord || !value) return res.json({ error: 'Required field(s) missing' });\r\n\r\n      // Valdidate puzzle\r\n      if (!puzzleString) return res.json({ error: 'Required field missing' });\r\n      if (!/^[0-9.]+$/.test(puzzleString)) return res.json({ error: 'Invalid characters in puzzle' });\r\n      if (puzzleString.length != 81) return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n\r\n      // Validate coords and value\r\n      if (!/^[a-i][1-9]$/.test(coord.toLowerCase())) return res.json({ error: 'Invalid coordinate' });\r\n      if (!/^[1-9]$/.test(value)) return res.json({ error: 'Invalid value' });\r\n\r\n      const row = coord[0];\r\n      const col = coord[1];\r\n\r\n      let isValid = true;\r\n      let conflict = [];\r\n\r\n      if (!solver.checkRowPlacement(puzzleString, row, value)) {\r\n        isValid = false;\r\n        conflict.push('row');\r\n      }\r\n\r\n      if (!solver.checkColPlacement(puzzleString, col, value)) {\r\n        isValid = false;\r\n        conflict.push('column');\r\n      }\r\n\r\n      if (!solver.checkRegionPlacement(puzzleString, row, col, value)) {\r\n        isValid = false;\r\n        conflict.push('region');\r\n      }\r\n\r\n      const rowIndex = coord.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\r\n      const colIndex = coord[1] - 1; // Convert '1-9' to 0-8\r\n      const cellIndex = rowIndex * 9 + colIndex;\r\n\r\n      if (puzzleString[cellIndex] == value) return res.json({ valid: true })\r\n\r\n      if (isValid) {\r\n        res.json({ valid: true })\r\n      } else res.json({ valid: false, conflict, })\r\n    });\r\n\r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      const puzzleString = req.body.puzzle;\r\n\r\n      if (!puzzleString) return res.json({ error: 'Required field missing' });\r\n      if (!/^[0-9.]+$/.test(puzzleString)) return res.json({ error: 'Invalid characters in puzzle' });\r\n      if (puzzleString.length != 81) return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n\r\n      const solvedPuzzle = solver.solve(puzzleString);\r\n\r\n      if (solvedPuzzle == false) return res.json({ error: 'Puzzle cannot be solved' });\r\n\r\n      res.json({ solution: solvedPuzzle });\r\n    });\r\n};\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735662781082
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Visual Programming\\\\Projects\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    // Validate the puzzle string: must be 81 characters long and only contain digits or dots\n    value: function validate(puzzleString) {\n      return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\n    } // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\n\n  }, {\n    key: \"rowToIndex\",\n    value: function rowToIndex(row) {\n      return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\n    } // Check if placing the number in the specified row is valid\n\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n\n      var start = rowIndex * 9; // Calculate the starting index of the row\n\n      var rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\n\n      return !rowValues.includes(value); // Return true if value is not in the row\n    } // Check if placing the number in the specified column is valid\n\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, column, value) {\n      // Adjust column to start from 0 index, as column is 1-based\n      var adjustedColumn = column - 1; // Loop through each row in the given column\n\n      for (var row = 0; row < 9; row++) {\n        // Calculate the index for the current position in the column\n        var index = row * 9 + adjustedColumn; // Check if the current value is already in that column\n\n        if (puzzleString[index] == value) return false; // Invalid if the value already exists\n      }\n\n      return true; // Valid if the value is not found\n    } // Check if placing the number in the 3x3 region is valid\n\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n      // Find the top-left corner of the 3x3 region\n\n      var regionStartRow = Math.floor(rowIndex / 3) * 3;\n      var regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\n      // Loop through each cell in the region\n\n      for (var r = regionStartRow; r < regionStartRow + 3; r++) {\n        for (var c = regionStartCol; c < regionStartCol + 3; c++) {\n          // Calculate the index in the puzzle string\n          var index = r * 9 + c; // Check if the value is already in the region\n\n          if (puzzleString[index] == value) return false; // Invalid if the value exists\n        }\n      }\n\n      return true; // Valid if the value is not found\n    } // Solve the Sudoku puzzle using backtracking\n\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var _this = this;\n\n      if (!this.validate(puzzleString)) return 'invalid puzzle';\n\n      var solveRecursively = function solveRecursively(board) {\n        // Find the next empty cell (marked with \".\")\n        var emptyIndex = board.indexOf(\".\"); // If there are no empty cells, the puzzle is solved\n\n        if (emptyIndex == -1) return board.join(\"\"); // Calculate row and column based on index\n\n        var row = Math.floor(emptyIndex / 9);\n        var col = emptyIndex % 9; // Try numbers 1-9 in the empty cell\n\n        for (var num = 1; num <= 9; num++) {\n          var value = num.toString(); // Check if the number can be placed in the current row, column, and region\n\n          if (_this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) && _this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\n          _this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\n          ) {\n              board[emptyIndex] = value; // Place the value in the board\n              // Recursively try to solve the rest of the puzzle\n\n              if (solveRecursively(board)) return board.join(\"\"); // Backtrack if no solution is found\n\n              board[emptyIndex] = \".\";\n            }\n        }\n\n        return false; // Return false if no solution exists\n      }; // Convert puzzle string to an array for mutability\n\n\n      var board = puzzleString.split(\"\"); // Start solving the puzzle and return the result or false if unsolvable\n\n      return solveRecursively(board) || false;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "length",
        "test",
        "row",
        "toLowerCase",
        "charCodeAt",
        "value",
        "rowIndex",
        "rowToIndex",
        "start",
        "rowValues",
        "slice",
        "includes",
        "column",
        "adjustedColumn",
        "index",
        "regionStartRow",
        "Math",
        "floor",
        "regionStartCol",
        "r",
        "c",
        "validate",
        "solveRecursively",
        "board",
        "emptyIndex",
        "indexOf",
        "join",
        "col",
        "num",
        "toString",
        "checkRowPlacement",
        "String",
        "fromCharCode",
        "checkColPlacement",
        "checkRegionPlacement",
        "split",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Visual Programming\\Projects\\boilerplate-project-sudoku-solver\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\r\n\r\n  // Validate the puzzle string: must be 81 characters long and only contain digits or dots\r\n  validate(puzzleString) {\r\n    return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\r\n  }\r\n\r\n  // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\r\n  rowToIndex(row) {\r\n    return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\r\n  }\r\n\r\n  // Check if placing the number in the specified row is valid\r\n  checkRowPlacement(puzzleString, row, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n    const start = rowIndex * 9; // Calculate the starting index of the row\r\n    const rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\r\n    return !rowValues.includes(value); // Return true if value is not in the row\r\n  }\r\n\r\n  // Check if placing the number in the specified column is valid\r\n  checkColPlacement(puzzleString, column, value) {\r\n    // Adjust column to start from 0 index, as column is 1-based\r\n    const adjustedColumn = column - 1;\r\n\r\n    // Loop through each row in the given column\r\n    for (let row = 0; row < 9; row++) {\r\n      // Calculate the index for the current position in the column\r\n      const index = row * 9 + adjustedColumn;\r\n\r\n      // Check if the current value is already in that column\r\n      if (puzzleString[index] == value)\r\n        return false; // Invalid if the value already exists\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Check if placing the number in the 3x3 region is valid\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n\r\n    // Find the top-left corner of the 3x3 region\r\n    const regionStartRow = Math.floor(rowIndex / 3) * 3;\r\n    const regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\r\n\r\n    // Loop through each cell in the region\r\n    for (let r = regionStartRow; r < regionStartRow + 3; r++) {\r\n      for (let c = regionStartCol; c < regionStartCol + 3; c++) {\r\n        // Calculate the index in the puzzle string\r\n        const index = r * 9 + c;\r\n\r\n        // Check if the value is already in the region\r\n        if (puzzleString[index] == value)\r\n          return false; // Invalid if the value exists\r\n      }\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Solve the Sudoku puzzle using backtracking\r\n  solve(puzzleString) {\r\n    if (!this.validate(puzzleString)) return 'invalid puzzle';\r\n\r\n    const solveRecursively = board => {\r\n      // Find the next empty cell (marked with \".\")\r\n      const emptyIndex = board.indexOf(\".\");\r\n\r\n      // If there are no empty cells, the puzzle is solved\r\n      if (emptyIndex == -1)\r\n        return board.join(\"\");\r\n\r\n      // Calculate row and column based on index\r\n      const row = Math.floor(emptyIndex / 9);\r\n      const col = emptyIndex % 9;\r\n\r\n      // Try numbers 1-9 in the empty cell\r\n      for (let num = 1; num <= 9; num++) {\r\n        const value = num.toString();\r\n\r\n        // Check if the number can be placed in the current row, column, and region\r\n        if (\r\n          this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) &&\r\n          this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\r\n          this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\r\n        ) {\r\n          board[emptyIndex] = value; // Place the value in the board\r\n\r\n          // Recursively try to solve the rest of the puzzle\r\n          if (solveRecursively(board))\r\n            return board.join(\"\");\r\n\r\n          // Backtrack if no solution is found\r\n          board[emptyIndex] = \".\";\r\n        }\r\n      }\r\n      return false; // Return false if no solution exists\r\n    };\r\n\r\n    // Convert puzzle string to an array for mutability\r\n    const board = puzzleString.split(\"\");\r\n\r\n    // Start solving the puzzle and return the result or false if unsolvable\r\n    return solveRecursively(board) || false;\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735606874945
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var _req$body = req.body,\n        puzzle = _req$body.puzzle,\n        coordinate = _req$body.coordinate,\n        value = _req$body.value; // Check for missing fields\n\n    if (!puzzle || !coordinate || !value) {\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    } // Validate puzzle\n\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    } // Validate coordinate and value\n\n\n    if (!/^[a-i][1-9]$/i.test(coordinate)) {\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    var row = coordinate[0].toLowerCase();\n    var col = coordinate[1];\n    var isValid = true;\n    var conflict = [];\n    var rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\n\n    var colIndex = parseInt(col, 10) - 1; // Convert '1-9' to 0-8\n\n    var cellIndex = rowIndex * 9 + colIndex; // Check if the value is already present\n\n    if (puzzle[cellIndex] === value) {\n      return res.json({\n        valid: true\n      });\n    } // Check row, column, and region validity\n\n\n    if (!solver.checkRowPlacement(puzzle, row, value)) {\n      isValid = false;\n      conflict.push('row');\n    }\n\n    if (!solver.checkColPlacement(puzzle, col, value)) {\n      isValid = false;\n      conflict.push('column');\n    }\n\n    if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\n      isValid = false;\n      conflict.push('region');\n    } // Return the result\n\n\n    res.json(isValid ? {\n      valid: true\n    } : {\n      valid: false,\n      conflict: conflict\n    });\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var puzzle = req.body.puzzle; // Validate puzzle\n\n    if (!puzzle) {\n      return res.json({\n        error: 'Required field missing'\n      });\n    }\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    var solution = solver.solve(puzzle);\n\n    if (!solution) {\n      return res.json({\n        error: 'Puzzle cannot be solved'\n      });\n    }\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "json",
        "error",
        "test",
        "length",
        "row",
        "toLowerCase",
        "col",
        "isValid",
        "conflict",
        "rowIndex",
        "charCodeAt",
        "colIndex",
        "parseInt",
        "cellIndex",
        "valid",
        "checkRowPlacement",
        "push",
        "checkColPlacement",
        "checkRegionPlacement",
        "solution",
        "solve"
      ],
      "mappings": "AAAA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;AACtB,MAAIC,MAAM,GAAG,IAAIL,YAAJ,EAAb;AAEAI,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBACoBD,GAAG,CAACE,IADxB;AAAA,QACVC,MADU,aACVA,MADU;AAAA,QACFC,UADE,aACFA,UADE;AAAA,QACUC,KADV,aACUA,KADV,EAGlB;;AACA,QAAI,CAACF,MAAD,IAAW,CAACC,UAAZ,IAA0B,CAACC,KAA/B,EAAsC;AACpC,aAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD,KANiB,CAQlB;;;AACA,QAAI,CAAC,YAAYC,IAAZ,CAAiBL,MAAjB,CAAL,EAA+B;AAC7B,aAAOF,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AACD,QAAIJ,MAAM,CAACM,MAAP,KAAkB,EAAtB,EAA0B;AACxB,aAAOR,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD,KAdiB,CAgBlB;;;AACA,QAAI,CAAC,gBAAgBC,IAAhB,CAAqBJ,UAArB,CAAL,EAAuC;AACrC,aAAOH,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AACD,QAAI,CAAC,UAAUC,IAAV,CAAeH,KAAf,CAAL,EAA4B;AAC1B,aAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AAED,QAAMG,GAAG,GAAGN,UAAU,CAAC,CAAD,CAAV,CAAcO,WAAd,EAAZ;AACA,QAAMC,GAAG,GAAGR,UAAU,CAAC,CAAD,CAAtB;AAEA,QAAIS,OAAO,GAAG,IAAd;AACA,QAAMC,QAAQ,GAAG,EAAjB;AAEA,QAAMC,QAAQ,GAAGL,GAAG,CAACM,UAAJ,CAAe,CAAf,IAAoB,EAArC,CA9BkB,CA8BuB;;AACzC,QAAMC,QAAQ,GAAGC,QAAQ,CAACN,GAAD,EAAM,EAAN,CAAR,GAAoB,CAArC,CA/BkB,CA+BuB;;AACzC,QAAMO,SAAS,GAAGJ,QAAQ,GAAG,CAAX,GAAeE,QAAjC,CAhCkB,CAkClB;;AACA,QAAId,MAAM,CAACgB,SAAD,CAAN,KAAsBd,KAA1B,EAAiC;AAC/B,aAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEc,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD,KArCiB,CAuClB;;;AACA,QAAI,CAACvB,MAAM,CAACwB,iBAAP,CAAyBlB,MAAzB,EAAiCO,GAAjC,EAAsCL,KAAtC,CAAL,EAAmD;AACjDQ,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,QAAQ,CAACQ,IAAT,CAAc,KAAd;AACD;;AACD,QAAI,CAACzB,MAAM,CAAC0B,iBAAP,CAAyBpB,MAAzB,EAAiCS,GAAjC,EAAsCP,KAAtC,CAAL,EAAmD;AACjDQ,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,QAAQ,CAACQ,IAAT,CAAc,QAAd;AACD;;AACD,QAAI,CAACzB,MAAM,CAAC2B,oBAAP,CAA4BrB,MAA5B,EAAoCO,GAApC,EAAyCE,GAAzC,EAA8CP,KAA9C,CAAL,EAA2D;AACzDQ,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,QAAQ,CAACQ,IAAT,CAAc,QAAd;AACD,KAnDiB,CAqDlB;;;AACArB,IAAAA,GAAG,CAACK,IAAJ,CAASO,OAAO,GAAG;AAAEO,MAAAA,KAAK,EAAE;AAAT,KAAH,GAAqB;AAAEA,MAAAA,KAAK,EAAE,KAAT;AAAgBN,MAAAA,QAAQ,EAARA;AAAhB,KAArC;AACD,GAxDH;AA0DAlB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QACVE,MADU,GACCH,GAAG,CAACE,IADL,CACVC,MADU,EAGlB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAOF,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AACD,QAAI,CAAC,YAAYC,IAAZ,CAAiBL,MAAjB,CAAL,EAA+B;AAC7B,aAAOF,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AACD,QAAIJ,MAAM,CAACM,MAAP,KAAkB,EAAtB,EAA0B;AACxB,aAAOR,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AAED,QAAMkB,QAAQ,GAAG5B,MAAM,CAAC6B,KAAP,CAAavB,MAAb,CAAjB;;AAEA,QAAI,CAACsB,QAAL,EAAe;AACb,aAAOxB,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT,CAAP;AACD;;AAEDN,IAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEmB,MAAAA,QAAQ,EAARA;AAAF,KAAT;AACD,GAtBH;AAuBD,CApFD",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = app => {\r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      const { puzzle, coordinate, value } = req.body;\r\n\r\n      // Check for missing fields\r\n      if (!puzzle || !coordinate || !value) {\r\n        return res.json({ error: 'Required field(s) missing' });\r\n      }\r\n\r\n      // Validate puzzle\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      // Validate coordinate and value\r\n      if (!/^[a-i][1-9]$/i.test(coordinate)) {\r\n        return res.json({ error: 'Invalid coordinate' });\r\n      }\r\n      if (!/^[1-9]$/.test(value)) {\r\n        return res.json({ error: 'Invalid value' });\r\n      }\r\n\r\n      const row = coordinate[0].toLowerCase();\r\n      const col = coordinate[1];\r\n\r\n      let isValid = true;\r\n      const conflict = [];\r\n\r\n      const rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\r\n      const colIndex = parseInt(col, 10) - 1;  // Convert '1-9' to 0-8\r\n      const cellIndex = rowIndex * 9 + colIndex;\r\n\r\n      // Check if the value is already present\r\n      if (puzzle[cellIndex] === value) {\r\n        return res.json({ valid: true });\r\n      }\r\n\r\n      // Check row, column, and region validity\r\n      if (!solver.checkRowPlacement(puzzle, row, value)) {\r\n        isValid = false;\r\n        conflict.push('row');\r\n      }\r\n      if (!solver.checkColPlacement(puzzle, col, value)) {\r\n        isValid = false;\r\n        conflict.push('column');\r\n      }\r\n      if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\r\n        isValid = false;\r\n        conflict.push('region');\r\n      }\r\n\r\n      // Return the result\r\n      res.json(isValid ? { valid: true } : { valid: false, conflict });\r\n    });\r\n\r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      const { puzzle } = req.body;\r\n\r\n      // Validate puzzle\r\n      if (!puzzle) {\r\n        return res.json({ error: 'Required field missing' });\r\n      }\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      const solution = solver.solve(puzzle);\r\n\r\n      if (!solution) {\r\n        return res.json({ error: 'Puzzle cannot be solved' });\r\n      }\r\n\r\n      res.json({ solution });\r\n    });\r\n};\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735689416443
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    // Validate the puzzle string: must be 81 characters long and only contain digits or dots\n    value: function validate(puzzleString) {\n      return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\n    } // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\n\n  }, {\n    key: \"rowToIndex\",\n    value: function rowToIndex(row) {\n      return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\n    } // Check if placing the number in the specified row is valid\n\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n\n      var start = rowIndex * 9; // Calculate the starting index of the row\n\n      var rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\n\n      return !rowValues.includes(value); // Return true if value is not in the row\n    } // Check if placing the number in the specified column is valid\n\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, column, value) {\n      // Adjust column to start from 0 index, as column is 1-based\n      var adjustedColumn = column - 1; // Loop through each row in the given column\n\n      for (var row = 0; row < 9; row++) {\n        // Calculate the index for the current position in the column\n        var index = row * 9 + adjustedColumn; // Check if the current value is already in that column\n\n        if (puzzleString[index] == value) return false; // Invalid if the value already exists\n      }\n\n      return true; // Valid if the value is not found\n    } // Check if placing the number in the 3x3 region is valid\n\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n      // Find the top-left corner of the 3x3 region\n\n      var regionStartRow = Math.floor(rowIndex / 3) * 3;\n      var regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\n      // Loop through each cell in the region\n\n      for (var r = regionStartRow; r < regionStartRow + 3; r++) {\n        for (var c = regionStartCol; c < regionStartCol + 3; c++) {\n          // Calculate the index in the puzzle string\n          var index = r * 9 + c; // Check if the value is already in the region\n\n          if (puzzleString[index] == value) return false; // Invalid if the value exists\n        }\n      }\n\n      return true; // Valid if the value is not found\n    } // Solve the Sudoku puzzle using backtracking\n\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var _this = this;\n\n      if (!this.validate(puzzleString)) return 'invalid puzzle';\n\n      var solveRecursively = function solveRecursively(board) {\n        // Find the next empty cell (marked with \".\")\n        var emptyIndex = board.indexOf(\".\"); // If there are no empty cells, the puzzle is solved\n\n        if (emptyIndex == -1) return board.join(\"\"); // Calculate row and column based on index\n\n        var row = Math.floor(emptyIndex / 9);\n        var col = emptyIndex % 9; // Try numbers 1-9 in the empty cell\n\n        for (var num = 1; num <= 9; num++) {\n          var value = num.toString(); // Check if the number can be placed in the current row, column, and region\n\n          if (_this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) && _this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\n          _this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\n          ) {\n              board[emptyIndex] = value; // Place the value in the board\n              // Recursively try to solve the rest of the puzzle\n\n              if (solveRecursively(board)) return board.join(\"\"); // Backtrack if no solution is found\n\n              board[emptyIndex] = \".\";\n            }\n        }\n\n        return false; // Return false if no solution exists\n      }; // Convert puzzle string to an array for mutability\n\n\n      var board = puzzleString.split(\"\"); // Start solving the puzzle and return the result or false if unsolvable\n\n      return solveRecursively(board) || false;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "length",
        "test",
        "row",
        "toLowerCase",
        "charCodeAt",
        "value",
        "rowIndex",
        "rowToIndex",
        "start",
        "rowValues",
        "slice",
        "includes",
        "column",
        "adjustedColumn",
        "index",
        "regionStartRow",
        "Math",
        "floor",
        "regionStartCol",
        "r",
        "c",
        "validate",
        "solveRecursively",
        "board",
        "emptyIndex",
        "indexOf",
        "join",
        "col",
        "num",
        "toString",
        "checkRowPlacement",
        "String",
        "fromCharCode",
        "checkColPlacement",
        "checkRegionPlacement",
        "split",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\r\n\r\n  // Validate the puzzle string: must be 81 characters long and only contain digits or dots\r\n  validate(puzzleString) {\r\n    return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\r\n  }\r\n\r\n  // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\r\n  rowToIndex(row) {\r\n    return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\r\n  }\r\n\r\n  // Check if placing the number in the specified row is valid\r\n  checkRowPlacement(puzzleString, row, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n    const start = rowIndex * 9; // Calculate the starting index of the row\r\n    const rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\r\n    return !rowValues.includes(value); // Return true if value is not in the row\r\n  }\r\n\r\n  // Check if placing the number in the specified column is valid\r\n  checkColPlacement(puzzleString, column, value) {\r\n    // Adjust column to start from 0 index, as column is 1-based\r\n    const adjustedColumn = column - 1;\r\n\r\n    // Loop through each row in the given column\r\n    for (let row = 0; row < 9; row++) {\r\n      // Calculate the index for the current position in the column\r\n      const index = row * 9 + adjustedColumn;\r\n\r\n      // Check if the current value is already in that column\r\n      if (puzzleString[index] == value)\r\n        return false; // Invalid if the value already exists\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Check if placing the number in the 3x3 region is valid\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n\r\n    // Find the top-left corner of the 3x3 region\r\n    const regionStartRow = Math.floor(rowIndex / 3) * 3;\r\n    const regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\r\n\r\n    // Loop through each cell in the region\r\n    for (let r = regionStartRow; r < regionStartRow + 3; r++) {\r\n      for (let c = regionStartCol; c < regionStartCol + 3; c++) {\r\n        // Calculate the index in the puzzle string\r\n        const index = r * 9 + c;\r\n\r\n        // Check if the value is already in the region\r\n        if (puzzleString[index] == value)\r\n          return false; // Invalid if the value exists\r\n      }\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Solve the Sudoku puzzle using backtracking\r\n  solve(puzzleString) {\r\n    if (!this.validate(puzzleString)) return 'invalid puzzle';\r\n\r\n    const solveRecursively = board => {\r\n      // Find the next empty cell (marked with \".\")\r\n      const emptyIndex = board.indexOf(\".\");\r\n\r\n      // If there are no empty cells, the puzzle is solved\r\n      if (emptyIndex == -1)\r\n        return board.join(\"\");\r\n\r\n      // Calculate row and column based on index\r\n      const row = Math.floor(emptyIndex / 9);\r\n      const col = emptyIndex % 9;\r\n\r\n      // Try numbers 1-9 in the empty cell\r\n      for (let num = 1; num <= 9; num++) {\r\n        const value = num.toString();\r\n\r\n        // Check if the number can be placed in the current row, column, and region\r\n        if (\r\n          this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) &&\r\n          this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\r\n          this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\r\n        ) {\r\n          board[emptyIndex] = value; // Place the value in the board\r\n\r\n          // Recursively try to solve the rest of the puzzle\r\n          if (solveRecursively(board))\r\n            return board.join(\"\");\r\n\r\n          // Backtrack if no solution is found\r\n          board[emptyIndex] = \".\";\r\n        }\r\n      }\r\n      return false; // Return false if no solution exists\r\n    };\r\n\r\n    // Convert puzzle string to an array for mutability\r\n    const board = puzzleString.split(\"\");\r\n\r\n    // Start solving the puzzle and return the result or false if unsolvable\r\n    return solveRecursively(board) || false;\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735606874945
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var _req$body = req.body,\n        puzzle = _req$body.puzzle,\n        coordinate = _req$body.coordinate,\n        value = _req$body.value; // Check for missing fields\n\n    if (!puzzle || !coordinate || !value) {\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    } // Validate puzzle\n\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    } // Validate coordinate and value\n\n\n    if (!/^[a-i][1-9]$/i.test(coordinate)) {\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    var row = coordinate[0].toLowerCase();\n    var col = coordinate[1];\n    var isValid = true;\n    var conflict = [];\n    var rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\n\n    var colIndex = parseInt(col, 10) - 1; // Convert '1-9' to 0-8\n\n    var cellIndex = rowIndex * 9 + colIndex; // Check if the value is already present\n\n    if (puzzle[cellIndex] === value) {\n      return res.json({\n        valid: true\n      });\n    } // Check row, column, and region validity\n\n\n    if (!solver.checkRowPlacement(puzzle, row, value)) {\n      isValid = false;\n      conflict.push('row');\n    }\n\n    if (!solver.checkColPlacement(puzzle, col, value)) {\n      isValid = false;\n      conflict.push('column');\n    }\n\n    if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\n      isValid = false;\n      conflict.push('region');\n    } // Return the result\n\n\n    res.json(isValid ? {\n      valid: true\n    } : {\n      valid: false,\n      conflict: conflict\n    });\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var puzzle = req.body.puzzle; // Validate puzzle\n\n    if (!puzzle) {\n      return res.json({\n        error: 'Required field missing'\n      });\n    }\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    var solution = solver.solve(puzzle);\n\n    if (!solution) {\n      return res.json({\n        error: 'Puzzle cannot be solved'\n      });\n    }\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "json",
        "error",
        "test",
        "length",
        "row",
        "toLowerCase",
        "col",
        "isValid",
        "conflict",
        "rowIndex",
        "charCodeAt",
        "colIndex",
        "parseInt",
        "cellIndex",
        "valid",
        "checkRowPlacement",
        "push",
        "checkColPlacement",
        "checkRegionPlacement",
        "solution",
        "solve"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = app => {\r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      const { puzzle, coordinate, value } = req.body;\r\n\r\n      // Check for missing fields\r\n      if (!puzzle || !coordinate || !value) {\r\n        return res.json({ error: 'Required field(s) missing' });\r\n      }\r\n\r\n      // Validate puzzle\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      // Validate coordinate and value\r\n      if (!/^[a-i][1-9]$/i.test(coordinate)) {\r\n        return res.json({ error: 'Invalid coordinate' });\r\n      }\r\n      if (!/^[1-9]$/.test(value)) {\r\n        return res.json({ error: 'Invalid value' });\r\n      }\r\n\r\n      const row = coordinate[0].toLowerCase();\r\n      const col = coordinate[1];\r\n\r\n      let isValid = true;\r\n      const conflict = [];\r\n\r\n      const rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\r\n      const colIndex = parseInt(col, 10) - 1;  // Convert '1-9' to 0-8\r\n      const cellIndex = rowIndex * 9 + colIndex;\r\n\r\n      // Check if the value is already present\r\n      if (puzzle[cellIndex] === value) {\r\n        return res.json({ valid: true });\r\n      }\r\n\r\n      // Check row, column, and region validity\r\n      if (!solver.checkRowPlacement(puzzle, row, value)) {\r\n        isValid = false;\r\n        conflict.push('row');\r\n      }\r\n      if (!solver.checkColPlacement(puzzle, col, value)) {\r\n        isValid = false;\r\n        conflict.push('column');\r\n      }\r\n      if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\r\n        isValid = false;\r\n        conflict.push('region');\r\n      }\r\n\r\n      // Return the result\r\n      res.json(isValid ? { valid: true } : { valid: false, conflict });\r\n    });\r\n\r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      const { puzzle } = req.body;\r\n\r\n      // Validate puzzle\r\n      if (!puzzle) {\r\n        return res.json({ error: 'Required field missing' });\r\n      }\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      const solution = solver.solve(puzzle);\r\n\r\n      if (!solution) {\r\n        return res.json({ error: 'Puzzle cannot be solved' });\r\n      }\r\n\r\n      res.json({ solution });\r\n    });\r\n};\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735689416443
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    // Validate the puzzle string: must be 81 characters long and only contain digits or dots\n    value: function validate(puzzleString) {\n      return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\n    } // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\n\n  }, {\n    key: \"rowToIndex\",\n    value: function rowToIndex(row) {\n      return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\n    } // Check if placing the number in the specified row is valid\n\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n\n      var start = rowIndex * 9; // Calculate the starting index of the row\n\n      var rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\n\n      return !rowValues.includes(value); // Return true if value is not in the row\n    } // Check if placing the number in the specified column is valid\n\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, column, value) {\n      // Adjust column to start from 0 index, as column is 1-based\n      var adjustedColumn = column - 1; // Loop through each row in the given column\n\n      for (var row = 0; row < 9; row++) {\n        // Calculate the index for the current position in the column\n        var index = row * 9 + adjustedColumn; // Check if the current value is already in that column\n\n        if (puzzleString[index] == value) return false; // Invalid if the value already exists\n      }\n\n      return true; // Valid if the value is not found\n    } // Check if placing the number in the 3x3 region is valid\n\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n      // Find the top-left corner of the 3x3 region\n\n      var regionStartRow = Math.floor(rowIndex / 3) * 3;\n      var regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\n      // Loop through each cell in the region\n\n      for (var r = regionStartRow; r < regionStartRow + 3; r++) {\n        for (var c = regionStartCol; c < regionStartCol + 3; c++) {\n          // Calculate the index in the puzzle string\n          var index = r * 9 + c; // Check if the value is already in the region\n\n          if (puzzleString[index] == value) return false; // Invalid if the value exists\n        }\n      }\n\n      return true; // Valid if the value is not found\n    } // Solve the Sudoku puzzle using backtracking\n\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var _this = this;\n\n      if (!this.validate(puzzleString)) return 'invalid puzzle';\n\n      var solveRecursively = function solveRecursively(board) {\n        // Find the next empty cell (marked with \".\")\n        var emptyIndex = board.indexOf(\".\"); // If there are no empty cells, the puzzle is solved\n\n        if (emptyIndex == -1) return board.join(\"\"); // Calculate row and column based on index\n\n        var row = Math.floor(emptyIndex / 9);\n        var col = emptyIndex % 9; // Try numbers 1-9 in the empty cell\n\n        for (var num = 1; num <= 9; num++) {\n          var value = num.toString(); // Check if the number can be placed in the current row, column, and region\n\n          if (_this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) && _this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\n          _this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\n          ) {\n            board[emptyIndex] = value; // Place the value in the board\n            // Recursively try to solve the rest of the puzzle\n\n            if (solveRecursively(board)) return board.join(\"\"); // Backtrack if no solution is found\n\n            board[emptyIndex] = \".\";\n          }\n        }\n\n        return false; // Return false if no solution exists\n      }; // Convert puzzle string to an array for mutability\n\n\n      var board = puzzleString.split(\"\"); // Start solving the puzzle and return the result or false if unsolvable\n\n      return solveRecursively(board) || false;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "length",
        "test",
        "row",
        "toLowerCase",
        "charCodeAt",
        "value",
        "rowIndex",
        "rowToIndex",
        "start",
        "rowValues",
        "slice",
        "includes",
        "column",
        "adjustedColumn",
        "index",
        "regionStartRow",
        "Math",
        "floor",
        "regionStartCol",
        "r",
        "c",
        "validate",
        "solveRecursively",
        "board",
        "emptyIndex",
        "indexOf",
        "join",
        "col",
        "num",
        "toString",
        "checkRowPlacement",
        "String",
        "fromCharCode",
        "checkColPlacement",
        "checkRegionPlacement",
        "split",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\r\n\r\n  // Validate the puzzle string: must be 81 characters long and only contain digits or dots\r\n  validate(puzzleString) {\r\n    return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\r\n  }\r\n\r\n  // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\r\n  rowToIndex(row) {\r\n    return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\r\n  }\r\n\r\n  // Check if placing the number in the specified row is valid\r\n  checkRowPlacement(puzzleString, row, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n    const start = rowIndex * 9; // Calculate the starting index of the row\r\n    const rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\r\n    return !rowValues.includes(value); // Return true if value is not in the row\r\n  }\r\n\r\n  // Check if placing the number in the specified column is valid\r\n  checkColPlacement(puzzleString, column, value) {\r\n    // Adjust column to start from 0 index, as column is 1-based\r\n    const adjustedColumn = column - 1;\r\n\r\n    // Loop through each row in the given column\r\n    for (let row = 0; row < 9; row++) {\r\n      // Calculate the index for the current position in the column\r\n      const index = row * 9 + adjustedColumn;\r\n\r\n      // Check if the current value is already in that column\r\n      if (puzzleString[index] == value)\r\n        return false; // Invalid if the value already exists\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Check if placing the number in the 3x3 region is valid\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n\r\n    // Find the top-left corner of the 3x3 region\r\n    const regionStartRow = Math.floor(rowIndex / 3) * 3;\r\n    const regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\r\n\r\n    // Loop through each cell in the region\r\n    for (let r = regionStartRow; r < regionStartRow + 3; r++) {\r\n      for (let c = regionStartCol; c < regionStartCol + 3; c++) {\r\n        // Calculate the index in the puzzle string\r\n        const index = r * 9 + c;\r\n\r\n        // Check if the value is already in the region\r\n        if (puzzleString[index] == value)\r\n          return false; // Invalid if the value exists\r\n      }\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Solve the Sudoku puzzle using backtracking\r\n  solve(puzzleString) {\r\n    if (!this.validate(puzzleString)) return 'invalid puzzle';\r\n\r\n    const solveRecursively = board => {\r\n      // Find the next empty cell (marked with \".\")\r\n      const emptyIndex = board.indexOf(\".\");\r\n\r\n      // If there are no empty cells, the puzzle is solved\r\n      if (emptyIndex == -1)\r\n        return board.join(\"\");\r\n\r\n      // Calculate row and column based on index\r\n      const row = Math.floor(emptyIndex / 9);\r\n      const col = emptyIndex % 9;\r\n\r\n      // Try numbers 1-9 in the empty cell\r\n      for (let num = 1; num <= 9; num++) {\r\n        const value = num.toString();\r\n        \r\n        // Check if the number can be placed in the current row, column, and region\r\n        if (\r\n          this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) &&\r\n          this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\r\n          this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\r\n        ) {\r\n          board[emptyIndex] = value; // Place the value in the board\r\n\r\n          // Recursively try to solve the rest of the puzzle\r\n          if (solveRecursively(board))\r\n            return board.join(\"\");\r\n\r\n          // Backtrack if no solution is found\r\n          board[emptyIndex] = \".\";\r\n        }\r\n      }\r\n      return false; // Return false if no solution exists\r\n    };\r\n\r\n    // Convert puzzle string to an array for mutability\r\n    const board = puzzleString.split(\"\");\r\n\r\n    // Start solving the puzzle and return the result or false if unsolvable\r\n    return solveRecursively(board) || false;\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1735749484711
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var _req$body = req.body,\n        puzzle = _req$body.puzzle,\n        coordinate = _req$body.coordinate,\n        value = _req$body.value; // Check for missing fields\n\n    if (!puzzle || !coordinate || !value) {\n      return res.json({\n        error: 'Required field(s) missing'\n      });\n    } // Validate puzzle\n\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    } // Validate coordinate and value\n\n\n    if (!/^[a-i][1-9]$/i.test(coordinate)) {\n      return res.json({\n        error: 'Invalid coordinate'\n      });\n    }\n\n    if (!/^[1-9]$/.test(value)) {\n      return res.json({\n        error: 'Invalid value'\n      });\n    }\n\n    var row = coordinate[0].toLowerCase();\n    var col = coordinate[1];\n    var isValid = true;\n    var conflict = [];\n    var rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\n\n    var colIndex = parseInt(col, 10) - 1; // Convert '1-9' to 0-8\n\n    var cellIndex = rowIndex * 9 + colIndex; // Check if the value is already present\n\n    if (puzzle[cellIndex] === value) {\n      return res.json({\n        valid: true\n      });\n    } // Check row, column, and region validity\n\n\n    if (!solver.checkRowPlacement(puzzle, row, value)) {\n      isValid = false;\n      conflict.push('row');\n    }\n\n    if (!solver.checkColPlacement(puzzle, col, value)) {\n      isValid = false;\n      conflict.push('column');\n    }\n\n    if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\n      isValid = false;\n      conflict.push('region');\n    } // Return the result\n\n\n    res.json(isValid ? {\n      valid: true\n    } : {\n      valid: false,\n      conflict: conflict\n    });\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var puzzle = req.body.puzzle; // Validate puzzle\n\n    if (!puzzle) {\n      return res.json({\n        error: 'Required field missing'\n      });\n    }\n\n    if (!/^[0-9.]+$/.test(puzzle)) {\n      return res.json({\n        error: 'Invalid characters in puzzle'\n      });\n    }\n\n    if (puzzle.length !== 81) {\n      return res.json({\n        error: 'Expected puzzle to be 81 characters long'\n      });\n    }\n\n    var solution = solver.solve(puzzle);\n\n    if (!solution) {\n      return res.json({\n        error: 'Puzzle cannot be solved'\n      });\n    }\n\n    res.json({\n      solution: solution\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "puzzle",
        "coordinate",
        "value",
        "json",
        "error",
        "test",
        "length",
        "row",
        "toLowerCase",
        "col",
        "isValid",
        "conflict",
        "rowIndex",
        "charCodeAt",
        "colIndex",
        "parseInt",
        "cellIndex",
        "valid",
        "checkRowPlacement",
        "push",
        "checkColPlacement",
        "checkRegionPlacement",
        "solution",
        "solve"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = app => {\r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n      const { puzzle, coordinate, value } = req.body;\r\n\r\n      // Check for missing fields\r\n      if (!puzzle || !coordinate || !value) {\r\n        return res.json({ error: 'Required field(s) missing' });\r\n      }\r\n\r\n      // Validate puzzle\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      // Validate coordinate and value\r\n      if (!/^[a-i][1-9]$/i.test(coordinate)) {\r\n        return res.json({ error: 'Invalid coordinate' });\r\n      }\r\n      if (!/^[1-9]$/.test(value)) {\r\n        return res.json({ error: 'Invalid value' });\r\n      }\r\n\r\n      const row = coordinate[0].toLowerCase();\r\n      const col = coordinate[1];\r\n\r\n      let isValid = true;\r\n      const conflict = [];\r\n\r\n      const rowIndex = row.charCodeAt(0) - 97; // Convert 'a-i' to 0-8\r\n      const colIndex = parseInt(col, 10) - 1;  // Convert '1-9' to 0-8\r\n      const cellIndex = rowIndex * 9 + colIndex;\r\n\r\n      // Check if the value is already present\r\n      if (puzzle[cellIndex] === value) {\r\n        return res.json({ valid: true });\r\n      }\r\n\r\n      // Check row, column, and region validity\r\n      if (!solver.checkRowPlacement(puzzle, row, value)) {\r\n        isValid = false;\r\n        conflict.push('row');\r\n      }\r\n      if (!solver.checkColPlacement(puzzle, col, value)) {\r\n        isValid = false;\r\n        conflict.push('column');\r\n      }\r\n      if (!solver.checkRegionPlacement(puzzle, row, col, value)) {\r\n        isValid = false;\r\n        conflict.push('region');\r\n      }\r\n\r\n      // Return the result\r\n      res.json(isValid ? { valid: true } : { valid: false, conflict });\r\n    });\r\n\r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      const { puzzle } = req.body;\r\n\r\n      // Validate puzzle\r\n      if (!puzzle) {\r\n        return res.json({ error: 'Required field missing' });\r\n      }\r\n      if (!/^[0-9.]+$/.test(puzzle)) {\r\n        return res.json({ error: 'Invalid characters in puzzle' });\r\n      }\r\n      if (puzzle.length !== 81) {\r\n        return res.json({ error: 'Expected puzzle to be 81 characters long' });\r\n      }\r\n\r\n      const solution = solver.solve(puzzle);\r\n\r\n      if (!solution) {\r\n        return res.json({ error: 'Puzzle cannot be solved' });\r\n      }\r\n\r\n      res.json({ solution });\r\n    });\r\n};\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1750031692070
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\",\"filename\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\ender\\\\Desktop\\\\CIS\\\\Quality Assurance\\\\Projects\\\\sudoku_solver\\\\backend\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend",
      "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    // Validate the puzzle string: must be 81 characters long and only contain digits or dots\n    value: function validate(puzzleString) {\n      return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\n    } // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\n\n  }, {\n    key: \"rowToIndex\",\n    value: function rowToIndex(row) {\n      return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\n    } // Check if placing the number in the specified row is valid\n\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n\n      var start = rowIndex * 9; // Calculate the starting index of the row\n\n      var rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\n\n      return !rowValues.includes(value); // Return true if value is not in the row\n    } // Check if placing the number in the specified column is valid\n\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, column, value) {\n      // Adjust column to start from 0 index, as column is 1-based\n      var adjustedColumn = column - 1; // Loop through each row in the given column\n\n      for (var row = 0; row < 9; row++) {\n        // Calculate the index for the current position in the column\n        var index = row * 9 + adjustedColumn; // Check if the current value is already in that column\n\n        if (puzzleString[index] == value) return false; // Invalid if the value already exists\n      }\n\n      return true; // Valid if the value is not found\n    } // Check if placing the number in the 3x3 region is valid\n\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var rowIndex = this.rowToIndex(row); // Convert row letter to index\n      // Find the top-left corner of the 3x3 region\n\n      var regionStartRow = Math.floor(rowIndex / 3) * 3;\n      var regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\n      // Loop through each cell in the region\n\n      for (var r = regionStartRow; r < regionStartRow + 3; r++) {\n        for (var c = regionStartCol; c < regionStartCol + 3; c++) {\n          // Calculate the index in the puzzle string\n          var index = r * 9 + c; // Check if the value is already in the region\n\n          if (puzzleString[index] == value) return false; // Invalid if the value exists\n        }\n      }\n\n      return true; // Valid if the value is not found\n    } // Solve the Sudoku puzzle using backtracking\n\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleString) {\n      var _this = this;\n\n      if (!this.validate(puzzleString)) return 'invalid puzzle';\n\n      var solveRecursively = function solveRecursively(board) {\n        // Find the next empty cell (marked with \".\")\n        var emptyIndex = board.indexOf(\".\"); // If there are no empty cells, the puzzle is solved\n\n        if (emptyIndex == -1) return board.join(\"\"); // Calculate row and column based on index\n\n        var row = Math.floor(emptyIndex / 9);\n        var col = emptyIndex % 9; // Try numbers 1-9 in the empty cell\n\n        for (var num = 1; num <= 9; num++) {\n          var value = num.toString(); // Check if the number can be placed in the current row, column, and region\n\n          if (_this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) && _this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\n          _this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\n          ) {\n            board[emptyIndex] = value; // Place the value in the board\n            // Recursively try to solve the rest of the puzzle\n\n            if (solveRecursively(board)) return board.join(\"\"); // Backtrack if no solution is found\n\n            board[emptyIndex] = \".\";\n          }\n        }\n\n        return false; // Return false if no solution exists\n      }; // Convert puzzle string to an array for mutability\n\n\n      var board = puzzleString.split(\"\"); // Start solving the puzzle and return the result or false if unsolvable\n\n      return solveRecursively(board) || false;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1ZG9rdS1zb2x2ZXIuanMiXSwibmFtZXMiOlsiU3Vkb2t1U29sdmVyIiwicHV6emxlU3RyaW5nIiwibGVuZ3RoIiwidGVzdCIsInJvdyIsInRvTG93ZXJDYXNlIiwiY2hhckNvZGVBdCIsInZhbHVlIiwicm93SW5kZXgiLCJyb3dUb0luZGV4Iiwic3RhcnQiLCJyb3dWYWx1ZXMiLCJzbGljZSIsImluY2x1ZGVzIiwiY29sdW1uIiwiYWRqdXN0ZWRDb2x1bW4iLCJpbmRleCIsInJlZ2lvblN0YXJ0Um93IiwiTWF0aCIsImZsb29yIiwicmVnaW9uU3RhcnRDb2wiLCJyIiwiYyIsInZhbGlkYXRlIiwic29sdmVSZWN1cnNpdmVseSIsImJvYXJkIiwiZW1wdHlJbmRleCIsImluZGV4T2YiLCJqb2luIiwiY29sIiwibnVtIiwidG9TdHJpbmciLCJjaGVja1Jvd1BsYWNlbWVudCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoZWNrQ29sUGxhY2VtZW50IiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJzcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0lBQU1BLFk7Ozs7Ozs7QUFFSjs2QkFDU0MsWSxFQUFjO0FBQ3JCLGFBQU9BLFlBQVksQ0FBQ0MsTUFBYixJQUF1QixFQUF2QixJQUE2QixZQUFZQyxJQUFaLENBQWlCRixZQUFqQixDQUFwQztBQUNELEssQ0FFRDs7OzsrQkFDV0csRyxFQUFLO0FBQ2QsYUFBT0EsR0FBRyxDQUFDQyxXQUFKLEdBQWtCQyxVQUFsQixDQUE2QixDQUE3QixJQUFrQyxFQUF6QyxDQURjLENBQytCO0FBQzlDLEssQ0FFRDs7OztzQ0FDa0JMLFksRUFBY0csRyxFQUFLRyxLLEVBQU87QUFDMUMsVUFBTUMsUUFBUSxHQUFHLEtBQUtDLFVBQUwsQ0FBZ0JMLEdBQWhCLENBQWpCLENBRDBDLENBQ0g7O0FBQ3ZDLFVBQU1NLEtBQUssR0FBR0YsUUFBUSxHQUFHLENBQXpCLENBRjBDLENBRWQ7O0FBQzVC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dkIsRUFBdUNLLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixLQUFLOUIsR0FBekIsQ0FBdkMsRUFBc0VHLEtBQXRFLEtBQ0EsS0FBSSxDQUFDNEIsaUJBQUwsQ0FBdUJWLEtBQUssQ0FBQ0csSUFBTixDQUFXLEVBQVgsQ0FBdkIsRUFBdUNDLEdBQUcsR0FBRyxDQUE3QyxFQUFnRHRCLEtBQWhELENBREEsSUFDMEQ7QUFDMUQsVUFBQSxLQUFJLENBQUM2QixvQkFBTCxDQUEwQlgsS0FBSyxDQUFDRyxJQUFOLENBQVcsRUFBWCxDQUExQixFQUEwQ0ssTUFBTSxDQUFDQyxZQUFQLENBQW9CLEtBQUs5QixHQUF6QixDQUExQyxFQUF5RXlCLEdBQUcsR0FBRyxDQUEvRSxFQUFrRnRCLEtBQWxGLENBSEYsQ0FHMkY7QUFIM0YsWUFJRTtBQUNBa0IsWUFBQUEsS0FBSyxDQUFDQyxVQUFELENBQUwsR0FBb0JuQixLQUFwQixDQURBLENBQzJCO0FBRTNCOztBQUNBLGdCQUFJaUIsZ0JBQWdCLENBQUNDLEtBQUQsQ0FBcEIsRUFDRSxPQUFPQSxLQUFLLENBQUNHLElBQU4sQ0FBVyxFQUFYLENBQVAsQ0FMRixDQU9BOztBQUNBSCxZQUFBQSxLQUFLLENBQUNDLFVBQUQsQ0FBTCxHQUFvQixHQUFwQjtBQUNEO0FBQ0Y7O0FBQ0QsZUFBTyxLQUFQLENBaENnQyxDQWdDbEI7QUFDZixPQWpDRCxDQUhrQixDQXNDbEI7OztBQUNBLFVBQU1ELEtBQUssR0FBR3hCLFlBQVksQ0FBQ29DLEtBQWIsQ0FBbUIsRUFBbkIsQ0FBZCxDQXZDa0IsQ0F5Q2xCOztBQUNBLGFBQU9iLGdCQUFnQixDQUFDQyxLQUFELENBQWhCLElBQTJCLEtBQWxDO0FBQ0Q7Ozs7OztBQUdIYSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ2QyxZQUFqQiIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXGVuZGVyXFxEZXNrdG9wXFxDSVNcXFF1YWxpdHkgQXNzdXJhbmNlXFxQcm9qZWN0c1xcc3Vkb2t1X3NvbHZlclxcYmFja2VuZFxcY29udHJvbGxlcnNcXCIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN1ZG9rdVNvbHZlciB7XHJcblxyXG4gIC8vIFZhbGlkYXRlIHRoZSBwdXp6bGUgc3RyaW5nOiBtdXN0IGJlIDgxIGNoYXJhY3RlcnMgbG9uZyBhbmQgb25seSBjb250YWluIGRpZ2l0cyBvciBkb3RzXHJcbiAgdmFsaWRhdGUocHV6emxlU3RyaW5nKSB7XHJcbiAgICByZXR1cm4gcHV6emxlU3RyaW5nLmxlbmd0aCA9PSA4MSAmJiAvXlswLTkuXSskLy50ZXN0KHB1enpsZVN0cmluZyk7XHJcbiAgfVxyXG5cclxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCByb3cgbGV0dGVyICgnQScgdG8gJ0knKSB0byBhIG51bWVyaWNhbCBpbmRleCAoMCB0byA4KVxyXG4gIHJvd1RvSW5kZXgocm93KSB7XHJcbiAgICByZXR1cm4gcm93LnRvTG93ZXJDYXNlKCkuY2hhckNvZGVBdCgwKSAtIDk3OyAvLyBDb252ZXJ0ICdhJyB0byAwLCAnYicgdG8gMSwgZXRjLlxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgcGxhY2luZyB0aGUgbnVtYmVyIGluIHRoZSBzcGVjaWZpZWQgcm93IGlzIHZhbGlkXHJcbiAgY2hlY2tSb3dQbGFjZW1lbnQocHV6emxlU3RyaW5nLCByb3csIHZhbHVlKSB7XHJcbiAgICBjb25zdCByb3dJbmRleCA9IHRoaXMucm93VG9JbmRleChyb3cpOyAvLyBDb252ZXJ0IHJvdyBsZXR0ZXIgdG8gaW5kZXhcclxuICAgIGNvbnN0IHN0YXJ0ID0gcm93SW5kZXggKiA5OyAvLyBDYWxjdWxhdGUgdGhlIHN0YXJ0aW5nIGluZGV4IG9mIHRoZSByb3dcclxuICAgIGNvbnN0IHJvd1ZhbHVlcyA9IHB1enpsZVN0cmluZy5zbGljZShzdGFydCwgc3RhcnQgKyA5KTsgLy8gR2V0IGFsbCB2YWx1ZXMgaW4gdGhlIHJvd1xyXG4gICAgcmV0dXJuICFyb3dWYWx1ZXMuaW5jbHVkZXModmFsdWUpOyAvLyBSZXR1cm4gdHJ1ZSBpZiB2YWx1ZSBpcyBub3QgaW4gdGhlIHJvd1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgcGxhY2luZyB0aGUgbnVtYmVyIGluIHRoZSBzcGVjaWZpZWQgY29sdW1uIGlzIHZhbGlkXHJcbiAgY2hlY2tDb2xQbGFjZW1lbnQocHV6emxlU3RyaW5nLCBjb2x1bW4sIHZhbHVlKSB7XHJcbiAgICAvLyBBZGp1c3QgY29sdW1uIHRvIHN0YXJ0IGZyb20gMCBpbmRleCwgYXMgY29sdW1uIGlzIDEtYmFzZWRcclxuICAgIGNvbnN0IGFkanVzdGVkQ29sdW1uID0gY29sdW1uIC0gMTtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggZWFjaCByb3cgaW4gdGhlIGdpdmVuIGNvbHVtblxyXG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgOTsgcm93KyspIHtcclxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBpbmRleCBmb3IgdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIGNvbHVtblxyXG4gICAgICBjb25zdCBpbmRleCA9IHJvdyAqIDkgKyBhZGp1c3RlZENvbHVtbjtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHZhbHVlIGlzIGFscmVhZHkgaW4gdGhhdCBjb2x1bW5cclxuICAgICAgaWYgKHB1enpsZVN0cmluZ1tpbmRleF0gPT0gdmFsdWUpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJbnZhbGlkIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGV4aXN0c1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7IC8vIFZhbGlkIGlmIHRoZSB2YWx1ZSBpcyBub3QgZm91bmRcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIHBsYWNpbmcgdGhlIG51bWJlciBpbiB0aGUgM3gzIHJlZ2lvbiBpcyB2YWxpZFxyXG4gIGNoZWNrUmVnaW9uUGxhY2VtZW50KHB1enpsZVN0cmluZywgcm93LCBjb2x1bW4sIHZhbHVlKSB7XHJcbiAgICBjb25zdCByb3dJbmRleCA9IHRoaXMucm93VG9JbmRleChyb3cpOyAvLyBDb252ZXJ0IHJvdyBsZXR0ZXIgdG8gaW5kZXhcclxuXHJcbiAgICAvLyBGaW5kIHRoZSB0b3AtbGVmdCBjb3JuZXIgb2YgdGhlIDN4MyByZWdpb25cclxuICAgIGNvbnN0IHJlZ2lvblN0YXJ0Um93ID0gTWF0aC5mbG9vcihyb3dJbmRleCAvIDMpICogMztcclxuICAgIGNvbnN0IHJlZ2lvblN0YXJ0Q29sID0gTWF0aC5mbG9vcigoY29sdW1uIC0gMSkgLyAzKSAqIDM7IC8vIEFkanVzdCBjb2x1bW4gZm9yIDEtYmFzZWQgaW5kZXhcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBjZWxsIGluIHRoZSByZWdpb25cclxuICAgIGZvciAobGV0IHIgPSByZWdpb25TdGFydFJvdzsgciA8IHJlZ2lvblN0YXJ0Um93ICsgMzsgcisrKSB7XHJcbiAgICAgIGZvciAobGV0IGMgPSByZWdpb25TdGFydENvbDsgYyA8IHJlZ2lvblN0YXJ0Q29sICsgMzsgYysrKSB7XHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBpbmRleCBpbiB0aGUgcHV6emxlIHN0cmluZ1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gciAqIDkgKyBjO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdmFsdWUgaXMgYWxyZWFkeSBpbiB0aGUgcmVnaW9uXHJcbiAgICAgICAgaWYgKHB1enpsZVN0cmluZ1tpbmRleF0gPT0gdmFsdWUpXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEludmFsaWQgaWYgdGhlIHZhbHVlIGV4aXN0c1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTsgLy8gVmFsaWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBmb3VuZFxyXG4gIH1cclxuXHJcbiAgLy8gU29sdmUgdGhlIFN1ZG9rdSBwdXp6bGUgdXNpbmcgYmFja3RyYWNraW5nXHJcbiAgc29sdmUocHV6emxlU3RyaW5nKSB7XHJcbiAgICBpZiAoIXRoaXMudmFsaWRhdGUocHV6emxlU3RyaW5nKSkgcmV0dXJuICdpbnZhbGlkIHB1enpsZSc7XHJcblxyXG4gICAgY29uc3Qgc29sdmVSZWN1cnNpdmVseSA9IGJvYXJkID0+IHtcclxuICAgICAgLy8gRmluZCB0aGUgbmV4dCBlbXB0eSBjZWxsIChtYXJrZWQgd2l0aCBcIi5cIilcclxuICAgICAgY29uc3QgZW1wdHlJbmRleCA9IGJvYXJkLmluZGV4T2YoXCIuXCIpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGVtcHR5IGNlbGxzLCB0aGUgcHV6emxlIGlzIHNvbHZlZFxyXG4gICAgICBpZiAoZW1wdHlJbmRleCA9PSAtMSlcclxuICAgICAgICByZXR1cm4gYm9hcmQuam9pbihcIlwiKTtcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSByb3cgYW5kIGNvbHVtbiBiYXNlZCBvbiBpbmRleFxyXG4gICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGVtcHR5SW5kZXggLyA5KTtcclxuICAgICAgY29uc3QgY29sID0gZW1wdHlJbmRleCAlIDk7XHJcblxyXG4gICAgICAvLyBUcnkgbnVtYmVycyAxLTkgaW4gdGhlIGVtcHR5IGNlbGxcclxuICAgICAgZm9yIChsZXQgbnVtID0gMTsgbnVtIDw9IDk7IG51bSsrKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBudW0udG9TdHJpbmcoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgbnVtYmVyIGNhbiBiZSBwbGFjZWQgaW4gdGhlIGN1cnJlbnQgcm93LCBjb2x1bW4sIGFuZCByZWdpb25cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0aGlzLmNoZWNrUm93UGxhY2VtZW50KGJvYXJkLmpvaW4oXCJcIiksIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyByb3cpLCB2YWx1ZSkgJiZcclxuICAgICAgICAgIHRoaXMuY2hlY2tDb2xQbGFjZW1lbnQoYm9hcmQuam9pbihcIlwiKSwgY29sICsgMSwgdmFsdWUpICYmIC8vIENvbHVtbiBhZGp1c3RlZCB0byAxLWJhc2VkXHJcbiAgICAgICAgICB0aGlzLmNoZWNrUmVnaW9uUGxhY2VtZW50KGJvYXJkLmpvaW4oXCJcIiksIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyByb3cpLCBjb2wgKyAxLCB2YWx1ZSkgLy8gQ29sdW1uIGFkanVzdGVkIHRvIDEtYmFzZWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGJvYXJkW2VtcHR5SW5kZXhdID0gdmFsdWU7IC8vIFBsYWNlIHRoZSB2YWx1ZSBpbiB0aGUgYm9hcmRcclxuXHJcbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSB0cnkgdG8gc29sdmUgdGhlIHJlc3Qgb2YgdGhlIHB1enpsZVxyXG4gICAgICAgICAgaWYgKHNvbHZlUmVjdXJzaXZlbHkoYm9hcmQpKVxyXG4gICAgICAgICAgICByZXR1cm4gYm9hcmQuam9pbihcIlwiKTtcclxuXHJcbiAgICAgICAgICAvLyBCYWNrdHJhY2sgaWYgbm8gc29sdXRpb24gaXMgZm91bmRcclxuICAgICAgICAgIGJvYXJkW2VtcHR5SW5kZXhdID0gXCIuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gUmV0dXJuIGZhbHNlIGlmIG5vIHNvbHV0aW9uIGV4aXN0c1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IHB1enpsZSBzdHJpbmcgdG8gYW4gYXJyYXkgZm9yIG11dGFiaWxpdHlcclxuICAgIGNvbnN0IGJvYXJkID0gcHV6emxlU3RyaW5nLnNwbGl0KFwiXCIpO1xyXG5cclxuICAgIC8vIFN0YXJ0IHNvbHZpbmcgdGhlIHB1enpsZSBhbmQgcmV0dXJuIHRoZSByZXN1bHQgb3IgZmFsc2UgaWYgdW5zb2x2YWJsZVxyXG4gICAgcmV0dXJuIHNvbHZlUmVjdXJzaXZlbHkoYm9hcmQpIHx8IGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTdWRva3VTb2x2ZXI7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "length",
        "test",
        "row",
        "toLowerCase",
        "charCodeAt",
        "value",
        "rowIndex",
        "rowToIndex",
        "start",
        "rowValues",
        "slice",
        "includes",
        "column",
        "adjustedColumn",
        "index",
        "regionStartRow",
        "Math",
        "floor",
        "regionStartCol",
        "r",
        "c",
        "validate",
        "solveRecursively",
        "board",
        "emptyIndex",
        "indexOf",
        "join",
        "col",
        "num",
        "toString",
        "checkRowPlacement",
        "String",
        "fromCharCode",
        "checkColPlacement",
        "checkRegionPlacement",
        "split",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\ender\\Desktop\\CIS\\Quality Assurance\\Projects\\sudoku_solver\\backend\\controllers\\",
      "sourcesContent": [
        "class SudokuSolver {\r\n\r\n  // Validate the puzzle string: must be 81 characters long and only contain digits or dots\r\n  validate(puzzleString) {\r\n    return puzzleString.length == 81 && /^[0-9.]+$/.test(puzzleString);\r\n  }\r\n\r\n  // Helper function to convert row letter ('A' to 'I') to a numerical index (0 to 8)\r\n  rowToIndex(row) {\r\n    return row.toLowerCase().charCodeAt(0) - 97; // Convert 'a' to 0, 'b' to 1, etc.\r\n  }\r\n\r\n  // Check if placing the number in the specified row is valid\r\n  checkRowPlacement(puzzleString, row, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n    const start = rowIndex * 9; // Calculate the starting index of the row\r\n    const rowValues = puzzleString.slice(start, start + 9); // Get all values in the row\r\n    return !rowValues.includes(value); // Return true if value is not in the row\r\n  }\r\n\r\n  // Check if placing the number in the specified column is valid\r\n  checkColPlacement(puzzleString, column, value) {\r\n    // Adjust column to start from 0 index, as column is 1-based\r\n    const adjustedColumn = column - 1;\r\n\r\n    // Loop through each row in the given column\r\n    for (let row = 0; row < 9; row++) {\r\n      // Calculate the index for the current position in the column\r\n      const index = row * 9 + adjustedColumn;\r\n\r\n      // Check if the current value is already in that column\r\n      if (puzzleString[index] == value)\r\n        return false; // Invalid if the value already exists\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Check if placing the number in the 3x3 region is valid\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    const rowIndex = this.rowToIndex(row); // Convert row letter to index\r\n\r\n    // Find the top-left corner of the 3x3 region\r\n    const regionStartRow = Math.floor(rowIndex / 3) * 3;\r\n    const regionStartCol = Math.floor((column - 1) / 3) * 3; // Adjust column for 1-based index\r\n\r\n    // Loop through each cell in the region\r\n    for (let r = regionStartRow; r < regionStartRow + 3; r++) {\r\n      for (let c = regionStartCol; c < regionStartCol + 3; c++) {\r\n        // Calculate the index in the puzzle string\r\n        const index = r * 9 + c;\r\n\r\n        // Check if the value is already in the region\r\n        if (puzzleString[index] == value)\r\n          return false; // Invalid if the value exists\r\n      }\r\n    }\r\n    return true; // Valid if the value is not found\r\n  }\r\n\r\n  // Solve the Sudoku puzzle using backtracking\r\n  solve(puzzleString) {\r\n    if (!this.validate(puzzleString)) return 'invalid puzzle';\r\n\r\n    const solveRecursively = board => {\r\n      // Find the next empty cell (marked with \".\")\r\n      const emptyIndex = board.indexOf(\".\");\r\n\r\n      // If there are no empty cells, the puzzle is solved\r\n      if (emptyIndex == -1)\r\n        return board.join(\"\");\r\n\r\n      // Calculate row and column based on index\r\n      const row = Math.floor(emptyIndex / 9);\r\n      const col = emptyIndex % 9;\r\n\r\n      // Try numbers 1-9 in the empty cell\r\n      for (let num = 1; num <= 9; num++) {\r\n        const value = num.toString();\r\n        \r\n        // Check if the number can be placed in the current row, column, and region\r\n        if (\r\n          this.checkRowPlacement(board.join(\"\"), String.fromCharCode(97 + row), value) &&\r\n          this.checkColPlacement(board.join(\"\"), col + 1, value) && // Column adjusted to 1-based\r\n          this.checkRegionPlacement(board.join(\"\"), String.fromCharCode(97 + row), col + 1, value) // Column adjusted to 1-based\r\n        ) {\r\n          board[emptyIndex] = value; // Place the value in the board\r\n\r\n          // Recursively try to solve the rest of the puzzle\r\n          if (solveRecursively(board))\r\n            return board.join(\"\");\r\n\r\n          // Backtrack if no solution is found\r\n          board[emptyIndex] = \".\";\r\n        }\r\n      }\r\n      return false; // Return false if no solution exists\r\n    };\r\n\r\n    // Convert puzzle string to an array for mutability\r\n    const board = puzzleString.split(\"\");\r\n\r\n    // Start solving the puzzle and return the result or false if unsolvable\r\n    return solveRecursively(board) || false;\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1749004625895
  }
}